- name: Primary - Create kubeadm config
  blockinfile:
    path: "{{ KUBEADM_CFG }}"
    create: yes
    block: |
      apiVersion: kubeadm.k8s.io/v1beta1
      kind: ClusterConfiguration
      kubernetesVersion: stable
      apiServer:
        timeoutForControlPlane: 10m
        certSANs:
        - {{ KUBEADM_APISERVER_HOST }}
        - {{ KUBELET_PRIMARY_MASTER_HOSTNAME }}
        extraArgs:
          # enable-admission-plugins: NodeRestriction,PodNodeSelector,PodTolerationRestriction
          service-node-port-range: "{{ KUBEADM_NODE_PORTRANGE }}"
      controlPlaneEndpoint: "{{ KUBEADM_APISERVER_HOST }}:{{ KUBEADM_APISERVER_PORT }}"
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      featureGates:
        SupportNodePidsLimit: false
        SupportPodPidsLimit: false
  register: kubeadm_cfg

- name: Primary - Reset full cluster if {{ KUBEADM_CFG }} changed
  include_role: name=k8s-reset-node
  args:
      apply:
          delegate_to: "{{item}}"
  when: kubeadm_cfg is changed
  with_items: "{{ansible_play_batch}}"

- name: Primary - Check Kubelet config file - {{K8S_KUBELET_CFG_PATH}}
  stat:
    path: "{{K8S_KUBELET_CFG_PATH}}"
  register: kubelet_st

- name: Primary - Set all nodes to use {{hostvars[KUBELET_PRIMARY_MASTER_HOSTNAME].ansible_default_ipv4.address}} for {{KUBEADM_APISERVER_HOST}}
  include_tasks: kubernetes_set_k8s_api.yaml
  args:
      apply:
          delegate_to: "{{item}}"
  vars:
    KUBEADM_APISERVER_IP: "{{hostvars[KUBELET_PRIMARY_MASTER_HOSTNAME].ansible_default_ipv4.address}}"
  with_items: "{{ansible_play_batch}}"
  when: kubelet_st.stat.exists == False

- name: Primary - Init cluster
  shell:
    kubeadm init --config {{ KUBEADM_CFG }}
    creates="{{K8S_KUBELET_CFG_PATH}}"
  when: kubelet_st.stat.exists == False

- name: Primary - Deploy keepalived
  include_tasks: apiLoadBalancer.yaml
  when: kubelet_st.stat.exists == False
  vars:
    keepalive_rest_node: False
    #keepalive_rest_node: "{{KUBELET_PRIMARY_MASTER_HOSTNAME}}"

- name: Primary - Adding network backend - Weave Net
  #shell: "kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.1.3/weave-daemonset.yaml"
  #shell: "kubectl apply -f https://cloud.weave.works/k8s/v1.7/net"
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  environment: "{{KUBECTL_ENV}}"
  register: result
  changed_when:
  - "'unchanged'  not in result.stdout|join('')"
  - "'configured' not in result.stdout|join('')"

- name: Primary - Download {{K8S_ETC_PATH}}
  synchronize:
    mode: pull
    src: "{{K8S_ETC_PATH}}/"
    dest: "{{ K8S_LOCAL_KUBELET_CFG_PATH }}"

- name: Primary - settle node
  import_tasks: kubernetes_node_settle.yaml
