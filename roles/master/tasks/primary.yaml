- name: Primary - Create kubeadm config
  blockinfile:
    path: "{{ KUBEADM_CFG }}"
    create: yes
    block: |
      apiVersion: kubeadm.k8s.io/v1beta1
      kind: ClusterConfiguration
      kubernetesVersion: stable
      apiServer:
        timeoutForControlPlane: 10m
        certSANs:
        - {{ KUBEADM_APISERVER_HOST }}
        - {{ KUBELET_PRIMARY_MASTER_HOSTNAME }}
      controlPlaneEndpoint: "{{ KUBEADM_APISERVER_HOST }}:{{ KUBEADM_APISERVER_PORT }}"
  register: kubeadm_cfg

- name: Primary - Reset cluster if {{ KUBEADM_CFG }} changed
  shell:
    kubeadm reset -f
  when: kubeadm_cfg|changed

- name: Primary - Check Kubelet config file - {{K8S_KUBELET_CFG_PATH}}
  stat:
    path: "{{K8S_KUBELET_CFG_PATH}}"
  register: kubelet_st

- name: Primary - Init cluster
  shell:
    kubeadm init --config {{ KUBEADM_CFG }}
    creates="{{K8S_KUBELET_CFG_PATH}}"
  when: kubelet_st.stat.exists == False

- name: Primary - Deploy keepalived
  include_tasks: apiLoadBalancer.yaml
  when: kubelet_st.stat.exists == False
  vars:
    keepalive_rest_node: "{{KUBELET_PRIMARY_MASTER_HOSTNAME}}"

- name: Primary - Adding network backend - Weave Net
  #shell: "kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.1.3/weave-daemonset.yaml"
  #shell: "kubectl apply -f https://cloud.weave.works/k8s/v1.7/net"
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  environment: "{{KUBECTL_ENV}}"
  register: result
  changed_when:
  - not result.stdout|search("unchanged")
  - not result.stdout|search("configured")

- name: Primary - Download {{K8S_ETC_PATH}}
  synchronize:
    mode: pull
    src: "{{K8S_ETC_PATH}}/"
    dest: "./kubeconfig"

- name: Primary - settle node
  import_tasks: kubernetes_node_settle.yaml
