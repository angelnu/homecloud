# Logrotate
- name: "Enable Docker experimental cli (docker manifest)"
  lineinfile:
    path: .docker/config.json
    insertafter: "^{"
    line: '	"experimental": "enabled",'

# Add Kubernetes internal DNS server to host -> needed for glusterfs client to resolve nodes
- name: "Add Kubernetes internal DNS to host resolv"
  blockinfile:
    path: /etc/resolvconf/resolv.conf.d/tail
    block: |
      options rotate
      options timeout:1
      nameserver 10.96.0.10
  register: result

- name: Restart resolvconf service
  systemd:
    name: resolvconf
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: result | changed

# Logrotate
- name: "Limit max log files to 1 MB each"
  lineinfile:
    path: /etc/logrotate.conf
    insertbefore: BOF
    line: maxsize 1M

- name: "configure cron to run logrotate each 30 minutes"
  copy:
    dest: /etc/cron.d/extralogrotate
    content: |
      */30 * * * * root /etc/cron.daily/logrotate

  register: result

- name: Restart cron service
  systemd:
    name: cron
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: result | changed

# Set hostname
- name: Set hostname
  hostname: name="{{ name }}"
  register: set_hostname

- name: Restart hostname
  shell: "hostnamectl set-hostname {{ name }}"
  when: set_hostname.changed

# Set timezone
- name: "Write timezone file with {{ timezone }}"
  copy:
    content: "{{ timezone }}"
    dest: /etc/timezone
  register: result

- name: Enable new timezone
  shell: "timedatectl set-timezone {{ timezone }}"
  when: result | changed

# Disable Swap
- name: swap - remove current swaps from fstab
  lineinfile:
    dest: /etc/fstab
    regexp: '^/[\S]+\s+none\s+swap '
    state: absent

- name: swap - disable swap
  shell: "cat /proc/swaps|tail -n +2 && swapoff --all"
  register: result
  changed_when: result.stdout_lines | length

# disable local dns server
- name: Comment out the dnsmask
  replace:
    dest: /etc/NetworkManager/NetworkManager.conf
    regexp: '^dns=dnsmasq'
    replace: '#dns=dnsmasq'
  register: result

- name: Restart Network Manager
  systemd:
    name: network-manager
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: result | changed
